// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum WineType {
  RED
  WHITE
  ROSE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  FULFILLED
  INVOICED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

model Wine {
  id          String   @id @default(cuid())
  name        String
  region      String
  year        Int
  price       Float
  stock       Int
  stock_alert Int
  type        WineType
  userId      String

  Discounts     Discount[]
  InvoiceLines  InvoiceLine[]
  OrderLines    OrderLine[]
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "wines_user_id_index")
}

model OrderLine {
  id          String  @id @default(cuid())
  quantity    Int
  unit_price  Float
  total       Float
  discount    Int?
  order_id    String
  wine_id     String

  order       Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  wine        Wine    @relation(fields: [wine_id], references: [id], onDelete: Cascade)

  @@index([order_id], name: "orders_lines_order_id_index")
  @@index([wine_id], name: "orders_lines_wine_id_index")
}

model Order {
  id          String      @id @default(cuid())
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  status      OrderStatus
  author_id   String
  client_id   String
  vat_applied Float?

  author     User        @relation(fields: [author_id], references: [id], onDelete: Cascade)
  client     Customer    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  lines      OrderLine[]

  @@index([author_id], name: "orders_author_id_index")
  @@index([client_id], name: "orders_client_id_index")
}

model InvoiceLine {
  id         String   @id @default(cuid())
  quantity   Int
  unit_price Float
  total      Float
  discount   Int?
  invoice_id String
  wine_id    String

  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  wine       Wine    @relation(fields: [wine_id], references: [id], onDelete: Cascade)

  @@index([invoice_id], name: "invoices_lines_invoice_id_index")
  @@index([wine_id], name: "invoices_lines_wine_id_index")
}

model Invoice {
  id          String       @id @default(cuid())
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  reference   String
  due_date    DateTime
  status      InvoiceStatus
  vat_applied Float?

  author_id   String
  client_id   String

  author     User         @relation(fields: [author_id], references: [id], onDelete: Cascade)
  client     Customer     @relation(fields: [client_id], references: [id], onDelete: Cascade)
  lines      InvoiceLine[]

  @@index([author_id], name: "invoices_author_id_index")
  @@index([client_id], name: "invoices_client_id_index")
}

model Discount {
  id              String   @id @default(cuid())
  quantity_min    Int
  discount_amount Int
  wine_id         String
  customer_id     String

  wine            Wine     @relation(fields: [wine_id], references: [id], onDelete: Cascade)
  customer        Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@index([wine_id], name: "discounts_wine_id_index")
  @@index([customer_id], name: "discounts_customer_id_index")
}

model Customer {
  id           String   @id @default(cuid())
  first_name   String
  last_name    String
  email        String   @unique
  phone        String
  adresse      String
  company      String?
  customer_of  String

  discounts    Discount[]
  invoices     Invoice[]
  orders       Order[]
  user         User     @relation(fields: [customer_of], references: [id], onDelete: Cascade)

  @@index([customer_of], name: "customers_customer_of_index")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String   @id @default(cuid())
  first_name    String
  last_name     String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String? // <-- Optional for other auth providers
  role          UserRole @default(USER)

  accounts      Account[]
  customers     Customer[]
  invoices      Invoice[]
  orders        Order[]
  wines         Wine[]
  userSettings  UserSettings?

  @@index([id], name: "user_id_index")
}

model UserSettings {
  id              String   @id @default(cuid())
  user_id         String   @unique
  vat_rate        Float    @default(20.00)
  payment_terms   Int      @default(30)
  currency        String   @default("EUR")

  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], name: "user_settings_user_id_index")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id         String  @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id         String  @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}
